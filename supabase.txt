-- tables

create table restaurants (
  id bigint generated by default as identity primary key,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  name text,
  icon text
);


create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  admin boolean,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

create table preferences (
  id uuid references auth.users not null,
  restaurant uuid references restaurants

  primary key (id),
);

create table preferences (
  id uuid references auth.users not null,
  restaurant bigint references restaurants
);

create table choices (
 id uuid references auth.users not null,
 restaurant bigint references restaurants 
);


-- RLS

CREATE POLICY "Update preferences"
ON public.preferences
FOR UPDATE USING (
  auth.uid() = id
) WITH CHECK (
  auth.uid()= id
);

CREATE POLICY "Insert choices"
ON public.choices
FOR INSERT WITH CHECK (
  auth.uid()= id
);

CREATE POLICY "Enable read access for all users" ON "public"."choices"
AS PERMISSIVE FOR SELECT
TO public
USING (true)

create policy "Restaurants are public"
  on restaurants for select
  using ( true );

-- not used
create policy "Preferences are public"
  on preferences for select
  using ( true );

-- not used
CREATE POLICY "Enable read access for all users" ON "public"."profiles"
AS PERMISSIVE FOR SELECT
TO public
USING (true)


-- not used
select cron.schedule (
    'daily-cleanup', -- name of the cron job
    '32 23 * * *', -- Saturday at 3:30am (GMT)
    $$ truncate choices $$
);